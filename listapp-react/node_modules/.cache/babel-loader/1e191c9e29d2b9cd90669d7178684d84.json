{"ast":null,"code":"var _jsxFileName = \"/Users/cgcouto/cs124/lab2/listapp-react/src/Line.js\";\nimport \"./Line.css\";\nimport \"./Lab1EmptyList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Line(props) {\n  function emptyCheck(props) {\n    return props.field !== \"\";\n  }\n\n  function clickDivWrapper() {\n    {\n      props.onClickLine(-1);\n    }\n    ;\n    props.onMoveTapLine(props.tapLine);\n  } //If you delete a Tap to Add Note line s.t. it's empty then click off the line, the checkbox\n  // remains with an empty line\n\n\n  function changeCheckWrapper() {\n    props.onCheck(props.line.key);\n  } //Add logic if empty return tap to add note\n\n\n  function lineLogic(props) {\n    if (props.clicked) {\n      if (props.tapLine === props.position) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"emptyCheckbox\",\n            type: \"checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"textboxes\",\n            type: \"text\",\n            onClick: e => {\n              e.stopPropagation();\n            },\n            onChange: e => props.onLineChangeField(props.line.key, e.target.value),\n            value: props.line.field\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 25\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"checkboxes\",\n            type: \"checkbox\",\n            onChange: e => {\n              changeCheckWrapper();\n            },\n            onClick: e => {\n              e.stopPropagation();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"textboxes\",\n            type: \"text\",\n            onClick: e => {\n              e.stopPropagation();\n            },\n            onChange: e => props.onLineChangeField(props.line.key, e.target.value),\n            value: props.line.field\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this);\n      }\n    } else if (emptyCheck(props)) {\n      if (props.tapLine === props.position) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"emptyCheckbox\",\n            type: \"checkbox\",\n            onChange: e => {\n              props.onCheck(props.line.key);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"textboxes\",\n            type: \"text\",\n            onClick: e => {\n              {\n                props.onClickLine(props.line.key);\n              }\n              e.stopPropagation();\n            },\n            onChange: e => props.onLineChangeField(props.line.key, e.target.value),\n            value: props.line.field\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this);\n      } else {\n        if (props.line.checked === true) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"checkboxes\",\n              type: \"checkbox\",\n              onChange: e => {\n                changeCheckWrapper();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"textboxes\",\n              type: \"text\",\n              onClick: e => {\n                {\n                  props.onClickLine(props.line.key);\n                }\n                e.stopPropagation();\n              },\n              onChange: e => props.onLineChangeField(props.line.key, e.target.value),\n              value: props.line.field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"checkboxes\",\n              type: \"checkbox\",\n              onChange: e => {\n                changeCheckWrapper();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"textboxes\",\n              type: \"text\",\n              onClick: e => {\n                {\n                  props.onClickLine(props.line.key);\n                }\n                e.stopPropagation();\n              },\n              onChange: e => props.onLineChangeField(props.line.key, e.target.value),\n              value: props.line.field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this);\n        }\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"emptyCheckbox\",\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"textboxes\",\n          disabled: true,\n          type: \"text\",\n          value: props.field,\n          onClick: () => console.log(\"yo\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-lines\",\n    onClick: e => {\n      clickDivWrapper();\n    },\n    children: lineLogic(props)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Line;\nexport default Line;\n\nvar _c;\n\n$RefreshReg$(_c, \"Line\");","map":{"version":3,"sources":["/Users/cgcouto/cs124/lab2/listapp-react/src/Line.js"],"names":["Line","props","emptyCheck","field","clickDivWrapper","onClickLine","onMoveTapLine","tapLine","changeCheckWrapper","onCheck","line","key","lineLogic","clicked","position","e","stopPropagation","onLineChangeField","target","value","checked","console","log"],"mappings":"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","sourcesContent":["import \"./Line.css\";\nimport \"./Lab1EmptyList.css\";\n\nfunction Line(props) {\n    function emptyCheck(props) {\n        return (\n            props.field !== \"\"\n        );\n    }\n\n    function clickDivWrapper() {\n        {props.onClickLine(-1)};\n        props.onMoveTapLine(props.tapLine);\n        }\n\n    //If you delete a Tap to Add Note line s.t. it's empty then click off the line, the checkbox\n    // remains with an empty line\n\n    function changeCheckWrapper() {\n        props.onCheck(props.line.key);\n    }\n\n    //Add logic if empty return tap to add note\n    function lineLogic(props) {\n        if (props.clicked) {\n            if (props.tapLine===props.position){\n                return (<li>\n                    <input className={\"emptyCheckbox\"}\n                           type={\"checkbox\"}>\n                    </input>\n                    <input className={\"textboxes\"}\n                           type={\"text\"}\n                           onClick={(e) => {\n                               e.stopPropagation()\n                           }}\n                           onChange={\n                               (e) => props.onLineChangeField(props.line.key, e.target.value)\n                           }\n                           value={props.line.field}>\n                    </input>\n                </li>)\n            } else {\n                return (<li>\n                    <input className={\"checkboxes\"}\n                           type={\"checkbox\"}\n                           onChange={(e) => {changeCheckWrapper()}}\n                           onClick={(e) => {e.stopPropagation()}}>\n                    </input>\n                    <input className={\"textboxes\"}\n                           type={\"text\"}\n                           onClick={(e) => {\n                               e.stopPropagation()\n                           }}\n                           onChange={\n                               (e) => props.onLineChangeField(props.line.key, e.target.value)\n                           }\n                           value={props.line.field}>\n                    </input>\n                </li>)\n            }\n        } else if (emptyCheck(props)) {\n            if (props.tapLine===props.position) {\n                return (<li>\n                <input className={\"emptyCheckbox\"}\n                       type={\"checkbox\"}\n                       onChange={(e) => {props.onCheck(props.line.key)}}>\n                </input>\n                <input className={\"textboxes\"}\n                       type={\"text\"}\n                       onClick={(e) => {\n                           {props.onClickLine(props.line.key)}\n                           e.stopPropagation();\n                       }}\n                       onChange={\n                           (e) => props.onLineChangeField(props.line.key, e.target.value)\n                       }\n                       value={props.line.field}>\n                </input>\n            </li>);\n            } else {\n                if (props.line.checked===true){\n                    return (<li>\n                        <input className={\"checkboxes\"}\n                               type={\"checkbox\"}\n                               onChange={(e) => {changeCheckWrapper()}}>\n                        </input>\n                        <input className={\"textboxes\"}\n                               type={\"text\"}\n                               onClick={(e) => {\n                                   {props.onClickLine(props.line.key)}\n                                   e.stopPropagation();\n                               }}\n                               onChange={\n                                   (e) => props.onLineChangeField(props.line.key, e.target.value)\n                               }\n                               value={props.line.field}>\n                        </input>\n                    </li>);\n                } else {\n                    return (<li>\n                        <input className={\"checkboxes\"}\n                               type={\"checkbox\"}\n                               onChange={(e) => {changeCheckWrapper()}}>\n                        </input>\n                        <input className={\"textboxes\"}\n                               type={\"text\"}\n                               onClick={(e) => {\n                                   {props.onClickLine(props.line.key)}\n                                   e.stopPropagation();\n                               }}\n                               onChange={\n                                   (e) => props.onLineChangeField(props.line.key, e.target.value)\n                               }\n                               value={props.line.field}>\n\n                        </input>\n                    </li>);\n                }\n                }\n        } else {\n            return (<li>\n                <input className={\"emptyCheckbox\"}\n                       type={\"checkbox\"}>\n                </input>\n                <input className={\"textboxes\"}\n                       disabled={true}\n                       type={\"text\"}\n                       value={props.field}\n                       onClick={() => console.log(\"yo\")}>\n                </input>\n            </li>);\n        }\n    }\n\nreturn (\n    <div className={\"all-lines\"} onClick={(e) => {clickDivWrapper()}}>\n        {lineLogic(props)}\n        {/*{console.log(props.position )}*/}\n    </div>\n)\n}\n\nexport default Line;"]},"metadata":{},"sourceType":"module"}