{"ast":null,"code":"var _jsxFileName = \"/Users/cgcouto/cs124/lab2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport LineList from './LineList.js';\nimport { useState } from 'react';\nimport { generateUniqueID } from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, query, setDoc, doc, updateDoc, deleteDoc } from \"firebase/firestore\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDlfim9PmxloCfyskIlZd6xt2RxlWem-kw\",\n  authDomain: \"cs124-lab3-fe950.firebaseapp.com\",\n  projectId: \"cs124-lab3-fe950\",\n  storageBucket: \"cs124-lab3-fe950.appspot.com\",\n  messagingSenderId: \"331313494047\",\n  appId: \"1:331313494047:web:cab4818df13adc8c9cfd2a\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst db = getFirestore(firebaseApp);\nconst collectionName = \"cs124-lab3-fe950\";\n\nfunction App() {\n  _s();\n\n  // Each list item is initialized with the fields shown below\n  // const initialData = [\n  //     {\n  //         key: 0,\n  //         // text is the value displayed in the textbox\n  //         text: \"Tap to Add Note\",\n  //         // checked is whether the checkbox is checked or not\n  //         checked: false,\n  //         // these fields determine whether the checkbox, textbox, and select button are each visible\n  //         check_visible: false,\n  //         text_visible: true,\n  //         select_visible: false\n  //     }\n  // ]\n  const q = query(collection(db, collectionName));\n  const [list, loading, error] = useCollectionData(q); // state data to be used later\n  // const [list, setList] = useState(initialData);\n  // const [initialData, setInitialData] = useState(false);\n\n  const [selected, setSelected] = useState([]);\n  const [edited, setEdited] = useState(-1);\n  const [hidden, setHidden] = useState(false);\n  const [showWarning, setWarning] = useState(false);\n  let initialData = 0; // stores data on what to display\n  // let showHideButton = (list.filter((item) => item.checked)).length > 0;\n\n  let showDeleteButton = selected.length > 0;\n  let disableChecks = edited !== -1; // update the edited state with the line key if we've currently clicked onto a line, -1 otherwise\n\n  function handleLineEdited(lineID) {\n    // if we're editing the bottommost 'Tap to Add Note' line and the text has changed, update our data/state\n    if (edited === list[list.length - 1].key && list[list.length - 1].text !== \"Tap to Add Note\") {\n      if (list[list.length - 1].text === \"\") {\n        handleItemChanged(list[list.length - 1].key, \"text\", \"Tap to Add Note\");\n      } else {\n        // display check and select box for added note, create tap line\n        list[list.length - 1].check_visible = true;\n        list[list.length - 1].select_visible = true;\n        handleItemAdded(\"Tap to Add Note\");\n      }\n    }\n\n    if (lineID === list[list.length - 1].key && edited !== lineID) {\n      handleItemChanged(lineID, \"text\", \"\");\n    }\n\n    setEdited(lineID); // update edited line state\n  } // changes line data for textboxes, checkboxes, or special key presses\n\n\n  function handleItemChanged(itemID, field, newValue) {\n    if (field === \"text\") {// return (\n      //     setList(list.map(\n      //         p => p.key === itemID ? {...p, [field]:newValue} : p))\n      // );\n    }\n\n    if (field === \"checkbox\") {// setList(list.map(\n      //     p => p.key === itemID ? {...p, checked:(!p.checked)} : p))\n    } // changes the active/\"clicked on\" element to body when enter is pressed\n\n\n    if (field === 'Enter') {\n      document.activeElement.blur();\n    } // deletes line if backspace is pressed while line is empty\n\n\n    if (field === 'Backspace') {\n      if (newValue === \"\" && itemID !== list[list.length - 1].key) {\n        handleItemDeleted(itemID);\n\n        if (selected.includes(itemID)) {\n          handleToggleSelectedLines(itemID);\n        }\n      }\n    }\n  } // controls whether the hide button should be showing\n\n\n  function handleHideToggle() {\n    setHidden(!hidden);\n  } // deletes data from the list by filtering out selected keys\n\n\n  function handleDelete() {\n    // setList(list.filter((p) => !selected.includes(p.key)));\n    setSelected([]); // no selected items remain, so update that\n\n    setWarning(false);\n  }\n\n  function handleWarning() {\n    setWarning(true);\n  } // changes display of selected lines by filtering selected lines\n\n\n  function handleToggleSelectedLines(lineID) {\n    if (selected.includes(lineID)) {\n      setSelected(selected.filter(p => p !== lineID));\n    } else {\n      setSelected([...selected, lineID]);\n    }\n  } // deletes an item by filtering it out from the data\n\n\n  function handleItemDeleted(itemID) {// return(setList(list.filter((p) => p.key !== itemID)));\n  } // adds an item by generating an id and using the passing in text\n\n\n  function handleItemAdded(textValue) {\n    const listId = generateUniqueID();\n    setDoc(doc(db, collectionName, listId), {\n      key: listId,\n      text: textValue,\n      checked: false,\n      check_visible: false,\n      text_visible: true,\n      select_visible: false\n    });\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: console.log(\"Your data is loading...\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (list.length == 0) {\n    handleItemAdded(\"Tap to Add Note\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    onClick: e => {\n      handleLineEdited(-1);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"button-div\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"title\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" My List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"lineList\",\n      children: /*#__PURE__*/_jsxDEV(LineList, {\n        lineList: list,\n        listData: list,\n        selectedLines: selected,\n        hideChecks: hidden,\n        showDeleteButton: showDeleteButton // showHideButton={showHideButton}\n        ,\n        disableChecks: disableChecks,\n        onHideToggle: handleHideToggle,\n        onToggleSelected: handleToggleSelectedLines,\n        onItemChanged: handleItemChanged,\n        onItemDeleted: handleItemDeleted,\n        onTrash: handleWarning,\n        onItemAdded: handleItemAdded,\n        onEdited: handleLineEdited\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), showWarning && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"back\",\n          onClick: () => setWarning(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"warning\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"The selected items will be \", /*#__PURE__*/_jsxDEV(\"span\", {\n              id: \"deleteText\",\n              children: \"permanently deleted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 56\n            }, this), \". Are you sure you want to delete these items?\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"warningButtons\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"no\",\n              onClick: () => setWarning(false),\n              children: \"No, Go Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"yes\",\n              onClick: handleDelete,\n              children: \"Yes, Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"d0666zLe5P72cYt+4tlR+3XTkMc=\", false, function () {\n  return [useCollectionData];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/cgcouto/cs124/lab2/src/App.js"],"names":["LineList","useState","generateUniqueID","initializeApp","getFirestore","collection","query","setDoc","doc","updateDoc","deleteDoc","useCollectionData","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","db","collectionName","App","q","list","loading","error","selected","setSelected","edited","setEdited","hidden","setHidden","showWarning","setWarning","initialData","showDeleteButton","length","disableChecks","handleLineEdited","lineID","key","text","handleItemChanged","check_visible","select_visible","handleItemAdded","itemID","field","newValue","document","activeElement","blur","handleItemDeleted","includes","handleToggleSelectedLines","handleHideToggle","handleDelete","handleWarning","filter","p","textValue","listId","checked","text_visible","console","log","e"],"mappings":"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","sourcesContent":["import './App.css';\nimport LineList from './LineList.js';\nimport {useState} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, query, setDoc, doc, updateDoc, deleteDoc} from \"firebase/firestore\";\nimport {useCollectionData} from \"react-firebase-hooks/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDlfim9PmxloCfyskIlZd6xt2RxlWem-kw\",\n    authDomain: \"cs124-lab3-fe950.firebaseapp.com\",\n    projectId: \"cs124-lab3-fe950\",\n    storageBucket: \"cs124-lab3-fe950.appspot.com\",\n    messagingSenderId: \"331313494047\",\n    appId: \"1:331313494047:web:cab4818df13adc8c9cfd2a\"\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst db = getFirestore(firebaseApp);\n\nconst collectionName = \"cs124-lab3-fe950\";\n\n\nfunction App() {\n\n    // Each list item is initialized with the fields shown below\n    // const initialData = [\n    //     {\n    //         key: 0,\n    //         // text is the value displayed in the textbox\n    //         text: \"Tap to Add Note\",\n    //         // checked is whether the checkbox is checked or not\n    //         checked: false,\n    //         // these fields determine whether the checkbox, textbox, and select button are each visible\n    //         check_visible: false,\n    //         text_visible: true,\n    //         select_visible: false\n    //     }\n    // ]\n\n    const q = query(collection(db, collectionName));\n    const [list, loading, error] = useCollectionData(q);\n\n    // state data to be used later\n    // const [list, setList] = useState(initialData);\n    // const [initialData, setInitialData] = useState(false);\n    const [selected, setSelected] = useState([]);\n    const [edited, setEdited] = useState(-1);\n    const [hidden, setHidden] = useState(false);\n    const [showWarning, setWarning] = useState(false);\n    let initialData = 0;\n\n    // stores data on what to display\n    // let showHideButton = (list.filter((item) => item.checked)).length > 0;\n    let showDeleteButton = selected.length > 0;\n    let disableChecks = (edited !== -1);\n\n    // update the edited state with the line key if we've currently clicked onto a line, -1 otherwise\n    function handleLineEdited(lineID) {\n\n        // if we're editing the bottommost 'Tap to Add Note' line and the text has changed, update our data/state\n        if (edited === list[list.length-1].key && list[list.length-1].text !== \"Tap to Add Note\") {\n            if (list[list.length-1].text === \"\") {\n                handleItemChanged(list[list.length-1].key, \"text\", \"Tap to Add Note\");\n\n            } else {\n                // display check and select box for added note, create tap line\n                list[list.length-1].check_visible = true;\n                list[list.length-1].select_visible = true;\n                handleItemAdded(\"Tap to Add Note\");\n\n            }\n        }\n        if (lineID === list[list.length-1].key && edited !== lineID) {\n            handleItemChanged(lineID, \"text\", \"\")\n        }\n\n        setEdited(lineID) // update edited line state\n    }\n\n    // changes line data for textboxes, checkboxes, or special key presses\n    function handleItemChanged(itemID, field, newValue) {\n\n        if (field === \"text\") {\n            // return (\n            //     setList(list.map(\n            //         p => p.key === itemID ? {...p, [field]:newValue} : p))\n            // );\n        }\n        if (field === \"checkbox\") {\n            // setList(list.map(\n            //     p => p.key === itemID ? {...p, checked:(!p.checked)} : p))\n        }\n\n        // changes the active/\"clicked on\" element to body when enter is pressed\n        if (field === 'Enter') {\n            document.activeElement.blur();\n        }\n\n        // deletes line if backspace is pressed while line is empty\n        if (field === 'Backspace') {\n            if (newValue === \"\" && itemID !== list[list.length-1].key) {\n                handleItemDeleted(itemID);\n                if (selected.includes(itemID)) {\n                    handleToggleSelectedLines(itemID);\n                }\n            }\n        }}\n\n    // controls whether the hide button should be showing\n    function handleHideToggle() {\n        setHidden(!hidden);\n    }\n\n    // deletes data from the list by filtering out selected keys\n    function handleDelete() {\n        // setList(list.filter((p) => !selected.includes(p.key)));\n        setSelected([]); // no selected items remain, so update that\n        setWarning(false);\n    }\n\n\n    function handleWarning() {\n        setWarning(true);\n    }\n\n    // changes display of selected lines by filtering selected lines\n    function handleToggleSelectedLines(lineID) {\n        if (selected.includes(lineID)) {\n            setSelected(selected.filter((p) => p !== lineID))\n        } else {\n            setSelected([...selected, lineID])\n        }\n    }\n\n    // deletes an item by filtering it out from the data\n    function handleItemDeleted(itemID) {\n        // return(setList(list.filter((p) => p.key !== itemID)));\n    }\n\n    // adds an item by generating an id and using the passing in text\n    function handleItemAdded(textValue) {\n        const listId = generateUniqueID();\n        setDoc(doc(db, collectionName, listId),\n            {\n                key: listId,\n                text: textValue,\n                checked: false,\n                check_visible: false,\n                text_visible: true,\n                select_visible: false\n            })\n    }\n\n    if (loading) {\n        return <div>\n            {console.log(\"Your data is loading...\")}\n        </div>;\n    }\n    if (list.length == 0) {\n        handleItemAdded(\"Tap to Add Note\");\n    }\n    return(\n        <div id=\"container\" onClick= {(e) => {handleLineEdited(-1)}}>\n            <div id=\"button-div\">\n                <button className=\"back-button\">&larr;</button>\n            </div>\n            <div id=\"title\"><h2> My List</h2></div>\n            <div id={\"lineList\"}>\n                <LineList lineList={list}\n                          listData={list}\n                          selectedLines={selected}\n                          hideChecks={hidden}\n                          showDeleteButton={showDeleteButton}\n                          // showHideButton={showHideButton}\n                          disableChecks={disableChecks}\n                          onHideToggle={handleHideToggle}\n                          onToggleSelected={handleToggleSelectedLines}\n                          onItemChanged={handleItemChanged}\n                          onItemDeleted={handleItemDeleted}\n                          onTrash={handleWarning}\n                          onItemAdded={handleItemAdded}\n                          onEdited={handleLineEdited}\n                          />\n            </div>\n            {showWarning && <div>\n                <div>\n                    <div id={\"back\"} onClick={() => setWarning(false)}/>\n                    <div id={\"warning\"} >\n                        <div>\n                            The selected items will be <span id={\"deleteText\"}>permanently deleted</span>.\n                            Are you sure you want to delete these items?\n                        </div>\n                        <div id={\"warningButtons\"}>\n\n\n                            <div id={\"no\"} onClick={() => setWarning(false)}>No, Go Back</div>\n                            <div id={\"yes\"} onClick={handleDelete}>Yes, Delete</div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>}\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}