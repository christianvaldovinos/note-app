{"ast":null,"code":"var _jsxFileName = \"/Users/cgcouto/cs124/lab4/src/LineData.js\";\nimport \"./LineData.css\";\nimport { Fragment } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LineData(props) {\n  // lists that help us assign specific CSS classes to elements based on state\n  const checkClasses = [\"checkboxes \"];\n  const textClasses = [\"textboxes \"];\n  const selectClasses = [\"select-button \"];\n  const itemClasses = [];\n  const divClasses = []; // hides line if hide button is clicked and item is completed\n\n  const hideLine = props.hideChecks && props.line.checked; // display of lines is altered by pushing classes based on the values of the line fields\n\n  if (props.line.checked) {\n    textClasses.push(\"checked \");\n  }\n\n  if (!props.line.text_visible) {\n    textClasses.push(\"hidden \");\n  }\n\n  if (!props.line.check_visible) {\n    checkClasses.push(\"hidden \");\n  }\n\n  if (!props.line.select_visible) {\n    selectClasses.push(\"hidden \");\n  }\n\n  if (props.disableChecks) {\n    checkClasses.push(\"disabled \");\n  }\n\n  if (props.selected) {\n    textClasses.push(\"selected \");\n    itemClasses.push(\"selected \");\n    divClasses.push(\"yo \");\n  } else {\n    textClasses.push(\"normal \");\n  } // updates the values which indicate which line we have clicked on\n\n\n  function clickTextWrapper(e, key) {\n    e.stopPropagation();\n    props.onEdited(key);\n  } // updates the value of a checkbox when we click on it\n\n\n  function changeCheckWrapper(e, key) {\n    props.onEdited(-1);\n    props.onItemChanged(key, \"checked\", props.line.checked ? !props.line.checked : {});\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: !hideLine && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        className: itemClasses.join(\" \"),\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: selectClasses.join(\" \"),\n          tabIndex: props.warning ? -1 : 0,\n          role: \"none\",\n          \"aria-label\": props.text + \" line select, priority level \" + props.priority,\n          onClick: e => props.onToggleSelected(props.line.key),\n          children: props.anySelected && !!props.priority && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"selectButtonText\",\n            children: props.priority\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), props.checked && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          tabIndex: props.warning ? -1 : 0,\n          className: checkClasses.join(\" \"),\n          \"aria-label\": props.text,\n          onChange: e => changeCheckWrapper(e, props.line.key),\n          checked: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 39\n        }, this), !props.checked && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          tabIndex: props.warning ? -1 : 0,\n          className: checkClasses.join(\" \"),\n          \"aria-label\": props.text,\n          onChange: e => changeCheckWrapper(e, props.line.key)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 40\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"textboxDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: textClasses.join(\" \"),\n            onClick: e => clickTextWrapper(e, props.line.key),\n            tabIndex: props.warning ? -1 : 0,\n            onChange: e => props.onItemChanged(props.line.key, \"text\", e.target.value),\n            onKeyDown: e => {\n              if (e.key === 'Enter') {\n                props.onItemChanged(props.line.key, e.key, props.text);\n                props.onEdited(props.line.key);\n              }\n\n              if (e.key === 'Backspace') {\n                props.onItemChanged(props.line.key, e.key, props.text);\n              }\n            },\n            value: props.text,\n            id: props.line.key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 27\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 13\n  }, this);\n}\n\n_c = LineData;\nexport default LineData;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineData\");","map":{"version":3,"sources":["/Users/cgcouto/cs124/lab4/src/LineData.js"],"names":["Fragment","LineData","props","checkClasses","textClasses","selectClasses","itemClasses","divClasses","hideLine","hideChecks","line","checked","push","text_visible","check_visible","select_visible","disableChecks","selected","clickTextWrapper","e","key","stopPropagation","onEdited","changeCheckWrapper","onItemChanged","join","warning","text","priority","onToggleSelected","anySelected","target","value"],"mappings":"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","sourcesContent":["import \"./LineData.css\";\n\nimport {Fragment} from \"react\";\n\nfunction LineData(props) {\n    // lists that help us assign specific CSS classes to elements based on state\n    const checkClasses = [\"checkboxes \"];\n    const textClasses = [\"textboxes \"];\n    const selectClasses = [\"select-button \"];\n    const itemClasses = [];\n    const divClasses = [];\n\n    // hides line if hide button is clicked and item is completed\n    const hideLine = props.hideChecks && props.line.checked;\n\n    // display of lines is altered by pushing classes based on the values of the line fields\n    if (props.line.checked) {\n        textClasses.push(\"checked \");\n    }\n    if (!props.line.text_visible) {\n        textClasses.push(\"hidden \");\n    }\n    if (!props.line.check_visible) {\n        checkClasses.push(\"hidden \");\n    }\n    if (!props.line.select_visible)  {\n        selectClasses.push(\"hidden \");\n    }\n    if (props.disableChecks) {\n        checkClasses.push(\"disabled \");\n    }\n    if (props.selected) {\n        textClasses.push(\"selected \");\n        itemClasses.push(\"selected \");\n        divClasses.push(\"yo \");\n    } else {\n        textClasses.push(\"normal \");\n    }\n\n    // updates the values which indicate which line we have clicked on\n    function clickTextWrapper(e, key) {\n        e.stopPropagation();\n        props.onEdited(key);\n    }\n\n    // updates the value of a checkbox when we click on it\n    function changeCheckWrapper(e, key) {\n        props.onEdited(-1);\n        props.onItemChanged(key,\"checked\", props.line.checked ? !props.line.checked : {} )\n    }\n\n    return (<Fragment>\n            {!hideLine && <div>\n                <li className={itemClasses.join(\" \")}>\n                    <button className={selectClasses.join(\" \")}\n                            tabIndex={props.warning ? -1 : 0}\n                            role={\"none\"}\n                            aria-label={props.text + \" line select, priority level \" + props.priority}\n                            onClick={(e) => props.onToggleSelected(props.line.key)}>\n                        {props.anySelected && !!props.priority &&\n                            <span className={\"selectButtonText\"}>\n                                {props.priority}\n                            </span>}\n                    </button>\n                    {props.checked && <input type={\"checkbox\"}\n                                             tabIndex={props.warning ? -1 : 0}\n                                             className={checkClasses.join(\" \")}\n                                             aria-label={props.text}\n                                             onChange={(e) => changeCheckWrapper(e, props.line.key)} checked/>}\n                    {!props.checked && <input type={\"checkbox\"}\n                                              tabIndex={props.warning ? -1 : 0}\n                                              className={checkClasses.join(\" \")}\n                                              aria-label={props.text}\n                                              onChange={(e) => changeCheckWrapper(e, props.line.key)}/>}\n                    <div id={\"textboxDiv\"}>\n                        <input type={\"text\"}\n                               className={textClasses.join(\" \")}\n                               onClick={(e) => clickTextWrapper(e, props.line.key)}\n                               tabIndex={props.warning ? -1 : 0}\n                               onChange={(e) => props.onItemChanged(props.line.key, \"text\", e.target.value)}\n                               onKeyDown={(e) =>\n                                       {if (e.key === 'Enter') {\n                                           props.onItemChanged(props.line.key, e.key, props.text);\n                                           props.onEdited(props.line.key);\n                                       } if (e.key === 'Backspace') {\n                                           props.onItemChanged(props.line.key, e.key, props.text);\n                                       }}}\n                               value={props.text}\n                               id={props.line.key}/>\n                    </div>\n                </li>\n            </div>}\n    </Fragment>)\n}\n\nexport default LineData;"]},"metadata":{},"sourceType":"module"}