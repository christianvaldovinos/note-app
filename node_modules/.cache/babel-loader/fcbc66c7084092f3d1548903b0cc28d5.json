{"ast":null,"code":"import _toConsumableArray from\"/Users/cgcouto/cs124/lab2/listapp-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _defineProperty from\"/Users/cgcouto/cs124/lab2/listapp-react/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/Users/cgcouto/cs124/lab2/listapp-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/cgcouto/cs124/lab2/listapp-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import'./App.css';import LineList from'./LineList.js';import{useState}from'react';import{generateUniqueID}from\"web-vitals/dist/modules/lib/generateUniqueID\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// Each list item is initialized with the fields shown below\nvar initialData=[{key:0,text:\"Tap to Add Note\",checked:false,check_visible:false,text_visible:true,select_visible:false}];// state data to be used later\nvar _useState=useState(initialData),_useState2=_slicedToArray(_useState,2),list=_useState2[0],setList=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),selected=_useState4[0],setSelected=_useState4[1];var _useState5=useState(-1),_useState6=_slicedToArray(_useState5,2),edited=_useState6[0],setEdited=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),hidden=_useState8[0],setHidden=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),showWarning=_useState10[0],setWarning=_useState10[1];// stores data on what to display\nvar showHideButton=list.filter(function(item){return item.checked===true;}).length>0;var showDeleteButton=selected.length>0;var disableChecks=edited!==-1;// update the edited state with the line key if we've currently clicked onto a line, -1 otherwise\nfunction handleLineEdited(lineID){// if we're editing the bottommost 'Tap to Add Note' line and the text has changed, update our data/state\nif(edited===list[list.length-1].key&&list[list.length-1].text!==\"Tap to Add Note\"){if(list[list.length-1].text===\"\"){handleItemChanged(list[list.length-1].key,\"text\",\"Tap to Add Note\");}else{// display check and select box for added note, create tap line\nlist[list.length-1].check_visible=true;list[list.length-1].select_visible=true;handleItemAdded(\"Tap to Add Note\");}}if(lineID===list[list.length-1].key&&edited!==lineID){handleItemChanged(lineID,\"text\",\"\");}setEdited(lineID);// update edited line state\n}// changes line data for textboxes, checkboxes, or special key presses\nfunction handleItemChanged(itemID,field,newValue){if(field===\"text\"){return setList(list.map(function(p){return p.key===itemID?_objectSpread(_objectSpread({},p),{},_defineProperty({},field,newValue)):p;}));}if(field===\"checkbox\"){setList(list.map(function(p){return p.key===itemID?_objectSpread(_objectSpread({},p),{},{checked:!p.checked}):p;}));}// changes the active/\"clicked on\" element to body when enter is pressed\nif(field==='Enter'){document.activeElement.blur();}// deletes line if backspace is pressed while line is empty\nif(field==='Backspace'){if(newValue===\"\"&&itemID!==list[list.length-1].key){handleItemDeleted(itemID);if(selected.includes(itemID)){handleToggleSelectedLines(itemID);}}}}// controls whether the hide button should be showing\nfunction handleHideToggle(){setHidden(!hidden);}// deletes data from the list by filtering out selected keys\nfunction handleDelete(){setList(list.filter(function(p){return!selected.includes(p.key);}));setSelected([]);// no selected items remain, so update that\nsetWarning(false);}function handleWarning(){setWarning(true);}// changes display of selected lines by filtering selected lines\nfunction handleToggleSelectedLines(lineID){if(selected.includes(lineID)){setSelected(selected.filter(function(p){return p!==lineID;}));}else{setSelected([].concat(_toConsumableArray(selected),[lineID]));}}// deletes an item by filtering it out from the data\nfunction handleItemDeleted(itemID){return setList(list.filter(function(p){return p.key!==itemID;}));}// adds an item by generating an id and using the passing in text\nfunction handleItemAdded(textValue){setList([].concat(_toConsumableArray(list),[{key:generateUniqueID(),text:textValue,checked:false,check_visible:false,text_visible:true,select_visible:false}]));}return/*#__PURE__*/_jsxs(\"div\",{id:\"container\",onClick:function onClick(e){handleLineEdited(-1);},children:[/*#__PURE__*/_jsx(\"div\",{id:\"button-div\",children:/*#__PURE__*/_jsx(\"button\",{className:\"back-button\",children:\"\\u2190\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"title\",children:/*#__PURE__*/_jsx(\"h2\",{children:\" My List\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"lineList\",children:/*#__PURE__*/_jsx(LineList,{lineList:list,listData:initialData,selectedLines:selected,hideChecks:hidden,showDeleteButton:showDeleteButton,showHideButton:showHideButton,disableChecks:disableChecks,onHideToggle:handleHideToggle,onToggleSelected:handleToggleSelectedLines,onItemChanged:handleItemChanged,onItemDeleted:handleItemDeleted,onTrash:handleWarning,onItemAdded:handleItemAdded,onEdited:handleLineEdited})}),showWarning&&/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{id:\"back\",onClick:function onClick(){return setWarning(false);}}),/*#__PURE__*/_jsxs(\"div\",{id:\"warning\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"The selected items will be \",/*#__PURE__*/_jsx(\"span\",{id:\"deleteText\",children:\"permanently deleted\"}),\". Are you sure you want to delete these items?\"]}),/*#__PURE__*/_jsxs(\"div\",{id:\"warningButtons\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"no\",onClick:function onClick(){return setWarning(false);},children:\"No, Go Back\"}),/*#__PURE__*/_jsx(\"div\",{id:\"yes\",onClick:handleDelete,children:\"Yes, Delete\"})]})]})]})})]});}export default App;","map":{"version":3,"sources":["/Users/cgcouto/cs124/lab2/listapp-react/src/App.js"],"names":["LineList","useState","generateUniqueID","App","initialData","key","text","checked","check_visible","text_visible","select_visible","list","setList","selected","setSelected","edited","setEdited","hidden","setHidden","showWarning","setWarning","showHideButton","filter","item","length","showDeleteButton","disableChecks","handleLineEdited","lineID","handleItemChanged","handleItemAdded","itemID","field","newValue","map","p","document","activeElement","blur","handleItemDeleted","includes","handleToggleSelectedLines","handleHideToggle","handleDelete","handleWarning","textValue","e"],"mappings":"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","sourcesContent":["import './App.css';\nimport LineList from './LineList.js';\nimport {useState} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nfunction App() {\n\n    // Each list item is initialized with the fields shown below\n    const initialData = [\n        {\n            key: 0,\n            text: \"Tap to Add Note\",\n            checked: false,\n            check_visible: false,\n            text_visible: true,\n            select_visible: false\n        }\n    ]\n\n    // state data to be used later\n    const [list, setList] = useState(initialData);\n    const [selected, setSelected] = useState([]);\n    const [edited, setEdited] = useState(-1);\n    const [hidden, setHidden] = useState(false);\n    const [showWarning, setWarning] = useState(false);\n\n    // stores data on what to display\n    let showHideButton = (list.filter((item) => item.checked === true)).length > 0;\n    let showDeleteButton = selected.length > 0;\n    let disableChecks = (edited !== -1);\n\n    // update the edited state with the line key if we've currently clicked onto a line, -1 otherwise\n    function handleLineEdited(lineID) {\n\n        // if we're editing the bottommost 'Tap to Add Note' line and the text has changed, update our data/state\n        if (edited === list[list.length-1].key && list[list.length-1].text !== \"Tap to Add Note\") {\n            if (list[list.length-1].text === \"\") {\n                handleItemChanged(list[list.length-1].key, \"text\", \"Tap to Add Note\");\n\n            } else {\n                // display check and select box for added note, create tap line\n                list[list.length-1].check_visible = true;\n                list[list.length-1].select_visible = true;\n                handleItemAdded(\"Tap to Add Note\");\n\n            }\n        }\n        if (lineID === list[list.length-1].key && edited !== lineID) {\n            handleItemChanged(lineID, \"text\", \"\")\n        }\n\n        setEdited(lineID) // update edited line state\n    }\n\n    // changes line data for textboxes, checkboxes, or special key presses\n    function handleItemChanged(itemID, field, newValue) {\n\n        if (field === \"text\") {\n            return (\n                setList(list.map(\n                    p => p.key === itemID ? {...p, [field]:newValue} : p))\n            );\n        }\n        if (field === \"checkbox\") {\n            setList(list.map(\n                p => p.key === itemID ? {...p, checked:(!p.checked)} : p))\n        }\n\n        // changes the active/\"clicked on\" element to body when enter is pressed\n        if (field === 'Enter') {\n            document.activeElement.blur();\n        }\n\n        // deletes line if backspace is pressed while line is empty\n        if (field === 'Backspace') {\n            if (newValue === \"\" && itemID !== list[list.length-1].key) {\n                handleItemDeleted(itemID);\n                if (selected.includes(itemID)) {\n                    handleToggleSelectedLines(itemID);\n                }\n            }\n        }}\n\n    // controls whether the hide button should be showing\n    function handleHideToggle() {\n        setHidden(!hidden);\n    }\n\n    // deletes data from the list by filtering out selected keys\n    function handleDelete() {\n        setList(list.filter((p) => !selected.includes(p.key)));\n        setSelected([]); // no selected items remain, so update that\n        setWarning(false);\n    }\n\n\n    function handleWarning() {\n        setWarning(true);\n    }\n\n    // changes display of selected lines by filtering selected lines\n    function handleToggleSelectedLines(lineID) {\n        if (selected.includes(lineID)) {\n            setSelected(selected.filter((p) => p !== lineID))\n        } else {\n            setSelected([...selected, lineID])\n        }\n    }\n\n    // deletes an item by filtering it out from the data\n    function handleItemDeleted(itemID) {\n        return(setList(list.filter((p) => p.key !== itemID)));\n    }\n\n    // adds an item by generating an id and using the passing in text\n    function handleItemAdded(textValue) {\n        setList([...list,\n            {\n                key: generateUniqueID(),\n                text: textValue,\n                checked: false,\n                check_visible: false,\n                text_visible: true,\n                select_visible: false\n            }]);\n    }\n\n    return(\n        <div id=\"container\" onClick= {(e) => {handleLineEdited(-1)}}>\n            <div id=\"button-div\">\n                <button className=\"back-button\">&larr;</button>\n            </div>\n            <div id=\"title\"><h2> My List</h2></div>\n            <div id={\"lineList\"}>\n                <LineList lineList={list}\n                          listData={initialData}\n                          selectedLines={selected}\n                          hideChecks={hidden}\n                          showDeleteButton={showDeleteButton}\n                          showHideButton={showHideButton}\n                          disableChecks={disableChecks}\n                          onHideToggle={handleHideToggle}\n                          onToggleSelected={handleToggleSelectedLines}\n                          onItemChanged={handleItemChanged}\n                          onItemDeleted={handleItemDeleted}\n                          onTrash={handleWarning}\n                          onItemAdded={handleItemAdded}\n                          onEdited={handleLineEdited}\n                          />\n            </div>\n            {showWarning && <div>\n                <div>\n                    <div id={\"back\"} onClick={() => setWarning(false)}/>\n                    <div id={\"warning\"} >\n                        <div>\n                            The selected items will be <span id={\"deleteText\"}>permanently deleted</span>.\n                            Are you sure you want to delete these items?\n                        </div>\n                        <div id={\"warningButtons\"}>\n\n\n                            <div id={\"no\"} onClick={() => setWarning(false)}>No, Go Back</div>\n                            <div id={\"yes\"} onClick={handleDelete}>Yes, Delete</div>\n\n                        </div>\n\n                    </div>\n                </div>\n            </div>}\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}