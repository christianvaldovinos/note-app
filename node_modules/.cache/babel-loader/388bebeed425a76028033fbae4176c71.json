{"ast":null,"code":"var _jsxFileName = \"/Users/cgcouto/cs124/lab2/listapp-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport './Lab1EmptyList.css';\nimport LineList from './LineList.js';\nimport { useState } from 'react';\nimport { generateUniqueID } from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = [{\n  key: 0,\n  text: \"Tap to Add Note\",\n  checkbox: false,\n  checked: false,\n  clicked: false,\n  visible: true\n}, {\n  key: 1,\n  text: \"Tap to Add Note\",\n  checkbox: false,\n  checked: false,\n  clicked: false,\n  visible: true\n}];\n\nfunction App() {\n  _s();\n\n  const [list, setList] = useState(initialData);\n  const [selected, setSelected] = useState(-1);\n  const [edited, setEdited] = useState(-1);\n\n  function handleLineEdited(lineID) {\n    if (edited === list[list.length - 1].key && list[list.length - 1].text !== \"Tap to Add Note\") {\n      handleItemAdded(\"Tap to Add Note\");\n    }\n\n    if (lineID !== -1 || lineID === -1 && edited !== -1) {\n      setEdited(lineID);\n    }\n  }\n\n  function handleItemChanged(itemID, field, newValue) {\n    if (field === \"text\") {\n      return setList(list.map(p => p.key === itemID ? { ...p,\n        [field]: newValue\n      } : p));\n    }\n\n    if (field === \"checkbox\") {\n      setList(list.map(p => p.key === itemID ? { ...p,\n        checked: !p.checked\n      } : p));\n    }\n  }\n\n  function handleItemDeleted(itemID) {\n    return setList(list.filter(p => p.key !== itemID));\n  }\n\n  function handleItemAdded(textValue) {\n    setList([...list, {\n      key: generateUniqueID(),\n      text: textValue,\n      checked: false,\n      checkbox: false,\n      clicked: false,\n      visible: true\n    }]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(LineList, {\n    linelist: list,\n    listData: initialData,\n    onItemChanged: handleItemChanged,\n    onItemDeleted: handleItemDeleted,\n    onItemAdded: handleItemAdded,\n    onEdited: handleLineEdited\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 13\n  }, this);\n}\n\n_s(App, \"inizyZOzX3V6IFGH1mFWzCb5qAI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/cgcouto/cs124/lab2/listapp-react/src/App.js"],"names":["LineList","useState","generateUniqueID","initialData","key","text","checkbox","checked","clicked","visible","App","list","setList","selected","setSelected","edited","setEdited","handleLineEdited","lineID","length","handleItemAdded","handleItemChanged","itemID","field","newValue","map","p","handleItemDeleted","filter","textValue"],"mappings":"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","sourcesContent":["import './App.css';\nimport './Lab1EmptyList.css';\nimport LineList from './LineList.js';\nimport {useState} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nconst initialData = [\n    {\n        key: 0,\n        text: \"Tap to Add Note\",\n        checkbox: false,\n        checked: false,\n        clicked: false,\n        visible: true\n    },\n    {\n        key: 1,\n        text: \"Tap to Add Note\",\n        checkbox: false,\n        checked: false,\n        clicked: false,\n        visible: true\n    }\n]\n\n\n\nfunction App() {\nconst [list, setList] = useState(initialData);\nconst [selected, setSelected] = useState(-1);\nconst [edited, setEdited] = useState(-1);\n\nfunction handleLineEdited(lineID) {\n    if (edited === list[list.length-1].key && list[list.length-1].text !== \"Tap to Add Note\") {\n        handleItemAdded(\"Tap to Add Note\");\n    }\n    if (lineID !== -1 || (lineID === -1 && edited !== -1)) {\n        setEdited(lineID);\n    }\n\n}\n\nfunction handleItemChanged(itemID, field, newValue) {\n    if (field === \"text\") {\n        return (\n            setList(list.map(\n                p => p.key === itemID ? {...p, [field]:newValue} : p))\n        );\n    }\n    if (field === \"checkbox\") {\n        setList(list.map(\n            p => p.key === itemID ? {...p, checked:(!p.checked)} : p))\n    }\n}\n\nfunction handleItemDeleted(itemID) {\n    return(setList(list.filter((p) => p.key !== itemID)));\n}\n\nfunction handleItemAdded(textValue) {\n    setList([...list,\n        {\n            key: generateUniqueID(),\n            text: textValue,\n            checked: false,\n            checkbox: false,\n            clicked: false,\n            visible: true\n        }]);\n}\n\n    return(\n            <LineList linelist={list}\n                      listData={initialData}\n                      onItemChanged={handleItemChanged}\n                      onItemDeleted={handleItemDeleted}\n                      onItemAdded={handleItemAdded}\n                      onEdited={handleLineEdited}/>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}