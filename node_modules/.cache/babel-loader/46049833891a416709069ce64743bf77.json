{"ast":null,"code":"var _jsxFileName = \"/Users/cgcouto/cs124/lab2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport LineList from './LineList.js';\nimport { useState } from 'react';\nimport { generateUniqueID } from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, query, setDoc, doc, updateDoc, deleteDoc, where, getDoc, getDocs, then } from \"firebase/firestore\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDlfim9PmxloCfyskIlZd6xt2RxlWem-kw\",\n  authDomain: \"cs124-lab3-fe950.firebaseapp.com\",\n  projectId: \"cs124-lab3-fe950\",\n  storageBucket: \"cs124-lab3-fe950.appspot.com\",\n  messagingSenderId: \"331313494047\",\n  appId: \"1:331313494047:web:cab4818df13adc8c9cfd2a\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst db = getFirestore(firebaseApp);\nconst collectionName = \"cs124-lab3-fe950\";\n\nfunction App() {\n  _s();\n\n  // Each list item is initialized with the fields shown below\n  // const initialData = [\n  //     {\n  //         key: 0,\n  //         // text is the value displayed in the textbox\n  //         text: \"Tap to Add Note\",\n  //         // checked is whether the checkbox is checked or not\n  //         checked: false,\n  //         // these fields determine whether the checkbox, textbox, and select button are each visible\n  //         check_visible: false,\n  //         text_visible: true,\n  //         select_visible: false\n  //     }\n  // ]\n  const q = query(collection(db, collectionName));\n  const [list, loading, error] = useCollectionData(q);\n  console.log(\"length\", list.filter(p => p.checked).length); // state data to be used later\n  // const [list, setList] = useState(initialData);\n  // const [initialData, setInitialData] = useState(false);\n\n  const [selected, setSelected] = useState([]);\n  const [edited, setEdited] = useState(-1);\n  const [hidden, setHidden] = useState(false);\n  const [showWarning, setWarning] = useState(false);\n  let initialData = 0; // stores data on what to display\n  // const q1 = query(collection(db, collectionName), where(\"checked\", \"==\", true));\n  // const q1Snapshot = getDocs(q1)\n  // let showHideButton = q1Snapshot.length > 0;\n\n  let showDeleteButton = selected.length > 0;\n  let disableChecks = edited !== -1; // update the edited state with the line key if we've currently clicked onto a line, -1 otherwise\n\n  function handleLineEdited(lineID) {\n    // if we're editing the bottommost 'Tap to Add Note' line and the text has changed, update our data/state\n    if (edited === list[list.length - 1].key && list[list.length - 1].text !== \"Tap to Add Note\") {\n      if (list[list.length - 1].text === \"\") {\n        handleItemChanged(list[list.length - 1].key, \"text\", \"Tap to Add Note\");\n      } else {\n        // display check and select box for added note, create tap line\n        handleItemChanged(list[list.length - 1].key, \"check_visible\", true);\n        handleItemChanged(list[list.length - 1].key, \"select_visible\", true);\n        handleItemAdded(\"Tap to Add Note\");\n      }\n    }\n\n    if (lineID === list[list.length - 1].key && edited !== lineID) {\n      handleItemChanged(lineID, \"text\", \"\");\n    }\n\n    setEdited(lineID); // update edited line state\n  } // changes line data for textboxes, checkboxes, or special key presses\n\n\n  function handleItemChanged(itemID, field, newValue) {\n    // const x = doc(db, collectionName, itemID);\n    if (field === \"text\" || field === \"check_visible\" || field == \"select_visible\" || field == \"checked\") {\n      updateDoc(doc(db, collectionName, itemID), {\n        [field]: newValue\n      });\n    } // changes the active/\"clicked on\" element to body when enter is pressed\n\n\n    if (field === 'Enter') {\n      document.activeElement.blur();\n    } // deletes line if backspace is pressed while line is empty\n\n\n    if (field === 'Backspace') {\n      if (newValue === \"\" && itemID !== list[list.length - 1].key) {\n        handleItemDeleted(itemID);\n\n        if (selected.includes(itemID)) {\n          handleToggleSelectedLines(itemID);\n        }\n      }\n    }\n  } // controls whether the hide button should be showing\n\n\n  function handleHideToggle() {\n    setHidden(!hidden);\n  } // deletes data from the list by filtering out selected keys\n\n\n  function handleDelete() {\n    // setList(list.filter((p) => !selected.includes(p.key)));\n    selected.forEach(id => deleteDoc(doc(db, collectionName, id)));\n    setSelected([]); // no selected items remain, so update that\n\n    setWarning(false);\n  }\n\n  function handleWarning() {\n    setWarning(true);\n  } // changes display of selected lines by filtering selected lines\n\n\n  function handleToggleSelectedLines(lineID) {\n    if (selected.includes(lineID)) {\n      setSelected(selected.filter(p => p !== lineID));\n    } else {\n      setSelected([...selected, lineID]);\n    }\n  } // deletes an item by filtering it out from the data\n\n\n  function handleItemDeleted(itemID) {\n    deleteDoc(doc(db, collectionName, itemID)); // return(setList(list.filter((p) => p.key !== itemID)));\n  } // adds an item by generating an id and using the passing in text\n\n\n  function handleItemAdded(textValue) {\n    const listId = generateUniqueID();\n    setDoc(doc(db, collectionName, listId), {\n      key: listId,\n      text: textValue,\n      checked: false,\n      check_visible: false,\n      text_visible: true,\n      select_visible: false\n    });\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: console.log(\"Your data is loading...\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 16\n    }, this);\n  } // this line is being displayed twice, one is italicized\n\n\n  if (list.length === 0) {\n    handleItemAdded(\"Tap to Add Note\");\n    console.log('running');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    onClick: e => {\n      handleLineEdited(-1);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"button-div\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"title\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" My List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"lineList\",\n      children: /*#__PURE__*/_jsxDEV(LineList, {\n        lineList: list,\n        selectedLines: selected,\n        hideChecks: hidden,\n        showDeleteButton: showDeleteButton // showHideButton={showHideButton}\n        ,\n        disableChecks: disableChecks,\n        onHideToggle: handleHideToggle,\n        onToggleSelected: handleToggleSelectedLines,\n        onItemChanged: handleItemChanged,\n        onItemDeleted: handleItemDeleted,\n        onTrash: handleWarning,\n        onItemAdded: handleItemAdded,\n        onEdited: handleLineEdited\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), showWarning && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"back\",\n          onClick: () => setWarning(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"warning\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"The selected items will be \", /*#__PURE__*/_jsxDEV(\"span\", {\n              id: \"deleteText\",\n              children: \"permanently deleted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 56\n            }, this), \". Are you sure you want to delete these items?\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"warningButtons\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"no\",\n              onClick: () => setWarning(false),\n              children: \"No, Go Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"yes\",\n              onClick: handleDelete,\n              children: \"Yes, Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"d0666zLe5P72cYt+4tlR+3XTkMc=\", false, function () {\n  return [useCollectionData];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/cgcouto/cs124/lab2/src/App.js"],"names":["LineList","useState","generateUniqueID","initializeApp","getFirestore","collection","query","setDoc","doc","updateDoc","deleteDoc","where","getDoc","getDocs","then","useCollectionData","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","db","collectionName","App","q","list","loading","error","console","log","filter","p","checked","length","selected","setSelected","edited","setEdited","hidden","setHidden","showWarning","setWarning","initialData","showDeleteButton","disableChecks","handleLineEdited","lineID","key","text","handleItemChanged","handleItemAdded","itemID","field","newValue","document","activeElement","blur","handleItemDeleted","includes","handleToggleSelectedLines","handleHideToggle","handleDelete","forEach","id","handleWarning","textValue","listId","check_visible","text_visible","select_visible","e"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,QAAP,MAAqB,eAArB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,SAAQC,gBAAR,QAA+B,8CAA/B;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,KAAnC,EAA0CC,MAA1C,EAAkDC,GAAlD,EAAuDC,SAAvD,EAAkEC,SAAlE,EAA6EC,KAA7E,EAAoFC,MAApF,EAA4FC,OAA5F,EAAqGC,IAArG,QAAgH,oBAAhH;AACA,SAAQC,iBAAR,QAAgC,gCAAhC;;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,kCAFO;AAGnBC,EAAAA,SAAS,EAAE,kBAHQ;AAInBC,EAAAA,aAAa,EAAE,8BAJI;AAKnBC,EAAAA,iBAAiB,EAAE,cALA;AAMnBC,EAAAA,KAAK,EAAE;AANY,CAAvB;AASA,MAAMC,WAAW,GAAGpB,aAAa,CAACa,cAAD,CAAjC;AACA,MAAMQ,EAAE,GAAGpB,YAAY,CAACmB,WAAD,CAAvB;AAEA,MAAME,cAAc,GAAG,kBAAvB;;AAGA,SAASC,GAAT,GAAe;AAAA;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,CAAC,GAAGrB,KAAK,CAACD,UAAU,CAACmB,EAAD,EAAKC,cAAL,CAAX,CAAf;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,IAAyBf,iBAAiB,CAACY,CAAD,CAAhD;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,IAAI,CAACK,MAAL,CAAYC,CAAC,IAAIA,CAAC,CAACC,OAAnB,EAA4BC,MAAlD,EApBW,CAsBX;AACA;AACA;;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BrC,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACsC,MAAD,EAASC,SAAT,IAAsBvC,QAAQ,CAAC,CAAC,CAAF,CAApC;AACA,QAAM,CAACwC,MAAD,EAASC,SAAT,IAAsBzC,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAAC0C,WAAD,EAAcC,UAAd,IAA4B3C,QAAQ,CAAC,KAAD,CAA1C;AACA,MAAI4C,WAAW,GAAG,CAAlB,CA7BW,CA+BX;AACA;AACA;AACA;;AACA,MAAIC,gBAAgB,GAAGT,QAAQ,CAACD,MAAT,GAAkB,CAAzC;AACA,MAAIW,aAAa,GAAIR,MAAM,KAAK,CAAC,CAAjC,CApCW,CAsCX;;AACA,WAASS,gBAAT,CAA0BC,MAA1B,EAAkC;AAE9B;AACA,QAAIV,MAAM,KAAKX,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBc,GAAjC,IAAwCtB,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBe,IAAtB,KAA+B,iBAA3E,EAA8F;AAC1F,UAAIvB,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBe,IAAtB,KAA+B,EAAnC,EAAuC;AACnCC,QAAAA,iBAAiB,CAACxB,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBc,GAAvB,EAA4B,MAA5B,EAAoC,iBAApC,CAAjB;AAEH,OAHD,MAGO;AACH;AACAE,QAAAA,iBAAiB,CAACxB,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBc,GAAvB,EAA4B,eAA5B,EAA6C,IAA7C,CAAjB;AACAE,QAAAA,iBAAiB,CAACxB,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBc,GAAvB,EAA4B,gBAA5B,EAA8C,IAA9C,CAAjB;AACAG,QAAAA,eAAe,CAAC,iBAAD,CAAf;AAEH;AACJ;;AACD,QAAIJ,MAAM,KAAKrB,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBc,GAAjC,IAAwCX,MAAM,KAAKU,MAAvD,EAA+D;AAC3DG,MAAAA,iBAAiB,CAACH,MAAD,EAAS,MAAT,EAAiB,EAAjB,CAAjB;AACH;;AAEDT,IAAAA,SAAS,CAACS,MAAD,CAAT,CAnB8B,CAmBZ;AACrB,GA3DU,CA6DX;;;AACA,WAASG,iBAAT,CAA2BE,MAA3B,EAAmCC,KAAnC,EAA0CC,QAA1C,EAAoD;AAChD;AACA,QAAID,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,eAA9B,IAAiDA,KAAK,IAAI,gBAA1D,IAA8EA,KAAK,IAAI,SAA3F,EAAsG;AAClG9C,MAAAA,SAAS,CAACD,GAAG,CAACgB,EAAD,EAAKC,cAAL,EAAqB6B,MAArB,CAAJ,EACL;AACI,SAACC,KAAD,GAASC;AADb,OADK,CAAT;AAIH,KAP+C,CAQhD;;;AACA,QAAID,KAAK,KAAK,OAAd,EAAuB;AACnBE,MAAAA,QAAQ,CAACC,aAAT,CAAuBC,IAAvB;AACH,KAX+C,CAYhD;;;AACA,QAAIJ,KAAK,KAAK,WAAd,EAA2B;AACvB,UAAIC,QAAQ,KAAK,EAAb,IAAmBF,MAAM,KAAK1B,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBc,GAAxD,EAA6D;AACzDU,QAAAA,iBAAiB,CAACN,MAAD,CAAjB;;AACA,YAAIjB,QAAQ,CAACwB,QAAT,CAAkBP,MAAlB,CAAJ,EAA+B;AAC3BQ,UAAAA,yBAAyB,CAACR,MAAD,CAAzB;AACH;AACJ;AACJ;AACJ,GAnFU,CAqFX;;;AACA,WAASS,gBAAT,GAA4B;AACxBrB,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACH,GAxFU,CA0FX;;;AACA,WAASuB,YAAT,GAAwB;AACpB;AACA3B,IAAAA,QAAQ,CAAC4B,OAAT,CAAiBC,EAAE,IAAIxD,SAAS,CAACF,GAAG,CAACgB,EAAD,EAAKC,cAAL,EAAqByC,EAArB,CAAJ,CAAhC;AACA5B,IAAAA,WAAW,CAAC,EAAD,CAAX,CAHoB,CAGH;;AACjBM,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAGD,WAASuB,aAAT,GAAyB;AACrBvB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACH,GArGU,CAuGX;;;AACA,WAASkB,yBAAT,CAAmCb,MAAnC,EAA2C;AACvC,QAAIZ,QAAQ,CAACwB,QAAT,CAAkBZ,MAAlB,CAAJ,EAA+B;AAC3BX,MAAAA,WAAW,CAACD,QAAQ,CAACJ,MAAT,CAAiBC,CAAD,IAAOA,CAAC,KAAKe,MAA7B,CAAD,CAAX;AACH,KAFD,MAEO;AACHX,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcY,MAAd,CAAD,CAAX;AACH;AACJ,GA9GU,CAgHX;;;AACA,WAASW,iBAAT,CAA2BN,MAA3B,EAAmC;AAC/B5C,IAAAA,SAAS,CAACF,GAAG,CAACgB,EAAD,EAAKC,cAAL,EAAqB6B,MAArB,CAAJ,CAAT,CAD+B,CAE/B;AACH,GApHU,CAsHX;;;AACA,WAASD,eAAT,CAAyBe,SAAzB,EAAoC;AAChC,UAAMC,MAAM,GAAGnE,gBAAgB,EAA/B;AACAK,IAAAA,MAAM,CAACC,GAAG,CAACgB,EAAD,EAAKC,cAAL,EAAqB4C,MAArB,CAAJ,EACF;AACInB,MAAAA,GAAG,EAAEmB,MADT;AAEIlB,MAAAA,IAAI,EAAEiB,SAFV;AAGIjC,MAAAA,OAAO,EAAE,KAHb;AAIImC,MAAAA,aAAa,EAAE,KAJnB;AAKIC,MAAAA,YAAY,EAAE,IALlB;AAMIC,MAAAA,cAAc,EAAE;AANpB,KADE,CAAN;AASH;;AAED,MAAI3C,OAAJ,EAAa;AACT,wBAAO;AAAA,gBACFE,OAAO,CAACC,GAAR,CAAY,yBAAZ;AADE;AAAA;AAAA;AAAA;AAAA,YAAP;AAGH,GAxIU,CAyIX;;;AACA,MAAIJ,IAAI,CAACQ,MAAL,KAAgB,CAApB,EAAuB;AACnBiB,IAAAA,eAAe,CAAC,iBAAD,CAAf;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH;;AACD,sBACI;AAAK,IAAA,EAAE,EAAC,WAAR;AAAoB,IAAA,OAAO,EAAGyC,CAAD,IAAO;AAChCzB,MAAAA,gBAAgB,CAAC,CAAC,CAAF,CAAhB;AACH,KAFD;AAAA,4BAGI;AAAK,MAAA,EAAE,EAAC,YAAR;AAAA,6BACI;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ,eAMI;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA,6BAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAhB;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAK,MAAA,EAAE,EAAE,UAAT;AAAA,6BACI,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEpB,IAApB;AACU,QAAA,aAAa,EAAES,QADzB;AAEU,QAAA,UAAU,EAAEI,MAFtB;AAGU,QAAA,gBAAgB,EAAEK,gBAH5B,CAIU;AAJV;AAKU,QAAA,aAAa,EAAEC,aALzB;AAMU,QAAA,YAAY,EAAEgB,gBANxB;AAOU,QAAA,gBAAgB,EAAED,yBAP5B;AAQU,QAAA,aAAa,EAAEV,iBARzB;AASU,QAAA,aAAa,EAAEQ,iBATzB;AAUU,QAAA,OAAO,EAAEO,aAVnB;AAWU,QAAA,WAAW,EAAEd,eAXvB;AAYU,QAAA,QAAQ,EAAEL;AAZpB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAPJ,EAuBKL,WAAW,iBAAI;AAAA,6BACZ;AAAA,gCACI;AAAK,UAAA,EAAE,EAAE,MAAT;AAAiB,UAAA,OAAO,EAAE,MAAMC,UAAU,CAAC,KAAD;AAA1C;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,EAAE,EAAE,SAAT;AAAA,kCACI;AAAA,mEAC+B;AAAM,cAAA,EAAE,EAAE,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAD/B;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAKI;AAAK,YAAA,EAAE,EAAE,gBAAT;AAAA,oCAGI;AAAK,cAAA,EAAE,EAAE,IAAT;AAAe,cAAA,OAAO,EAAE,MAAMA,UAAU,CAAC,KAAD,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAK,cAAA,EAAE,EAAE,KAAT;AAAgB,cAAA,OAAO,EAAEoB,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADY;AAAA;AAAA;AAAA;AAAA,YAvBpB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4CH;;GA1LQtC,G;UAkB0BX,iB;;;KAlB1BW,G;AA4LT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport LineList from './LineList.js';\nimport {useState} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, query, setDoc, doc, updateDoc, deleteDoc, where, getDoc, getDocs, then} from \"firebase/firestore\";\nimport {useCollectionData} from \"react-firebase-hooks/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDlfim9PmxloCfyskIlZd6xt2RxlWem-kw\",\n    authDomain: \"cs124-lab3-fe950.firebaseapp.com\",\n    projectId: \"cs124-lab3-fe950\",\n    storageBucket: \"cs124-lab3-fe950.appspot.com\",\n    messagingSenderId: \"331313494047\",\n    appId: \"1:331313494047:web:cab4818df13adc8c9cfd2a\"\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst db = getFirestore(firebaseApp);\n\nconst collectionName = \"cs124-lab3-fe950\";\n\n\nfunction App() {\n\n    // Each list item is initialized with the fields shown below\n    // const initialData = [\n    //     {\n    //         key: 0,\n    //         // text is the value displayed in the textbox\n    //         text: \"Tap to Add Note\",\n    //         // checked is whether the checkbox is checked or not\n    //         checked: false,\n    //         // these fields determine whether the checkbox, textbox, and select button are each visible\n    //         check_visible: false,\n    //         text_visible: true,\n    //         select_visible: false\n    //     }\n    // ]\n\n    const q = query(collection(db, collectionName));\n    const [list, loading, error] = useCollectionData(q);\n\n    console.log(\"length\", list.filter(p => p.checked).length)\n\n    // state data to be used later\n    // const [list, setList] = useState(initialData);\n    // const [initialData, setInitialData] = useState(false);\n    const [selected, setSelected] = useState([]);\n    const [edited, setEdited] = useState(-1);\n    const [hidden, setHidden] = useState(false);\n    const [showWarning, setWarning] = useState(false);\n    let initialData = 0;\n\n    // stores data on what to display\n    // const q1 = query(collection(db, collectionName), where(\"checked\", \"==\", true));\n    // const q1Snapshot = getDocs(q1)\n    // let showHideButton = q1Snapshot.length > 0;\n    let showDeleteButton = selected.length > 0;\n    let disableChecks = (edited !== -1);\n\n    // update the edited state with the line key if we've currently clicked onto a line, -1 otherwise\n    function handleLineEdited(lineID) {\n\n        // if we're editing the bottommost 'Tap to Add Note' line and the text has changed, update our data/state\n        if (edited === list[list.length - 1].key && list[list.length - 1].text !== \"Tap to Add Note\") {\n            if (list[list.length - 1].text === \"\") {\n                handleItemChanged(list[list.length - 1].key, \"text\", \"Tap to Add Note\");\n\n            } else {\n                // display check and select box for added note, create tap line\n                handleItemChanged(list[list.length - 1].key, \"check_visible\", true);\n                handleItemChanged(list[list.length - 1].key, \"select_visible\", true);\n                handleItemAdded(\"Tap to Add Note\");\n\n            }\n        }\n        if (lineID === list[list.length - 1].key && edited !== lineID) {\n            handleItemChanged(lineID, \"text\", \"\")\n        }\n\n        setEdited(lineID) // update edited line state\n    }\n\n    // changes line data for textboxes, checkboxes, or special key presses\n    function handleItemChanged(itemID, field, newValue) {\n        // const x = doc(db, collectionName, itemID);\n        if (field === \"text\" || field === \"check_visible\" || field == \"select_visible\" || field == \"checked\") {\n            updateDoc(doc(db, collectionName, itemID),\n                {\n                    [field]: newValue,\n                })\n        }\n        // changes the active/\"clicked on\" element to body when enter is pressed\n        if (field === 'Enter') {\n            document.activeElement.blur();\n        }\n        // deletes line if backspace is pressed while line is empty\n        if (field === 'Backspace') {\n            if (newValue === \"\" && itemID !== list[list.length - 1].key) {\n                handleItemDeleted(itemID);\n                if (selected.includes(itemID)) {\n                    handleToggleSelectedLines(itemID);\n                }\n            }\n        }\n    }\n\n    // controls whether the hide button should be showing\n    function handleHideToggle() {\n        setHidden(!hidden);\n    }\n\n    // deletes data from the list by filtering out selected keys\n    function handleDelete() {\n        // setList(list.filter((p) => !selected.includes(p.key)));\n        selected.forEach(id => deleteDoc(doc(db, collectionName, id)));\n        setSelected([]); // no selected items remain, so update that\n        setWarning(false);\n    }\n\n\n    function handleWarning() {\n        setWarning(true);\n    }\n\n    // changes display of selected lines by filtering selected lines\n    function handleToggleSelectedLines(lineID) {\n        if (selected.includes(lineID)) {\n            setSelected(selected.filter((p) => p !== lineID))\n        } else {\n            setSelected([...selected, lineID])\n        }\n    }\n\n    // deletes an item by filtering it out from the data\n    function handleItemDeleted(itemID) {\n        deleteDoc(doc(db, collectionName, itemID));\n        // return(setList(list.filter((p) => p.key !== itemID)));\n    }\n\n    // adds an item by generating an id and using the passing in text\n    function handleItemAdded(textValue) {\n        const listId = generateUniqueID();\n        setDoc(doc(db, collectionName, listId),\n            {\n                key: listId,\n                text: textValue,\n                checked: false,\n                check_visible: false,\n                text_visible: true,\n                select_visible: false\n            })\n    }\n\n    if (loading) {\n        return <div>\n            {console.log(\"Your data is loading...\")}\n        </div>;\n    }\n    // this line is being displayed twice, one is italicized\n    if (list.length === 0) {\n        handleItemAdded(\"Tap to Add Note\");\n        console.log('running');\n    }\n    return (\n        <div id=\"container\" onClick={(e) => {\n            handleLineEdited(-1)\n        }}>\n            <div id=\"button-div\">\n                <button className=\"back-button\">&larr;</button>\n            </div>\n            <div id=\"title\"><h2> My List</h2></div>\n            <div id={\"lineList\"}>\n                <LineList lineList={list}\n                          selectedLines={selected}\n                          hideChecks={hidden}\n                          showDeleteButton={showDeleteButton}\n                          // showHideButton={showHideButton}\n                          disableChecks={disableChecks}\n                          onHideToggle={handleHideToggle}\n                          onToggleSelected={handleToggleSelectedLines}\n                          onItemChanged={handleItemChanged}\n                          onItemDeleted={handleItemDeleted}\n                          onTrash={handleWarning}\n                          onItemAdded={handleItemAdded}\n                          onEdited={handleLineEdited}\n                />\n            </div>\n            {showWarning && <div>\n                <div>\n                    <div id={\"back\"} onClick={() => setWarning(false)}/>\n                    <div id={\"warning\"}>\n                        <div>\n                            The selected items will be <span id={\"deleteText\"}>permanently deleted</span>.\n                            Are you sure you want to delete these items?\n                        </div>\n                        <div id={\"warningButtons\"}>\n\n\n                            <div id={\"no\"} onClick={() => setWarning(false)}>No, Go Back</div>\n                            <div id={\"yes\"} onClick={handleDelete}>Yes, Delete</div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>}\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}