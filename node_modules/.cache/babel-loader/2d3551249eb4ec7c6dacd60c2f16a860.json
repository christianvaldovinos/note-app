{"ast":null,"code":"var _jsxFileName = \"/Users/cgcouto/cs124/lab2/listapp-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport LineList from './LineList.js';\nimport { useState } from 'react';\nimport { generateUniqueID } from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Each list item is initialized with the fields shown below\n  const initialData = [{\n    key: 0,\n    text: \"Tap to Add Note\",\n    checked: false,\n    check_visible: false,\n    text_visible: true,\n    select_visible: false\n  }]; // state data to be used later\n\n  const [list, setList] = useState(initialData);\n  const [selected, setSelected] = useState([]);\n  const [edited, setEdited] = useState(-1);\n  const [hidden, setHidden] = useState(false);\n  const [showWarning, setWarning] = useState(false); // stores data on what to display\n\n  let showHideButton = list.filter(item => item.checked === true).length > 0;\n  let showDeleteButton = selected.length > 0;\n  let disableChecks = edited !== -1; // update the edited state with the line key if we've currently clicked onto a line, -1 otherwise\n\n  function handleLineEdited(lineID) {\n    // if we're editing the bottommost 'Tap to Add Note' line and the text has changed, update our data/state\n    if (edited === list[list.length - 1].key && list[list.length - 1].text !== \"Tap to Add Note\") {\n      if (list[list.length - 1].text === \"\") {\n        handleItemChanged(list[list.length - 1].key, \"text\", \"Tap to Add Note\");\n      } else {\n        // display check and select box for added note, create tap line\n        list[list.length - 1].check_visible = true;\n        list[list.length - 1].select_visible = true;\n        handleItemAdded(\"Tap to Add Note\");\n      }\n    }\n\n    if (lineID === list[list.length - 1].key && edited !== lineID) {\n      handleItemChanged(lineID, \"text\", \"\");\n    }\n\n    setEdited(lineID); // update edited line state\n  } // changes line data for textboxes, checkboxes, or special key presses\n\n\n  function handleItemChanged(itemID, field, newValue) {\n    if (field === \"text\") {\n      return setList(list.map(p => p.key === itemID ? { ...p,\n        [field]: newValue\n      } : p));\n    }\n\n    if (field === \"checkbox\") {\n      setList(list.map(p => p.key === itemID ? { ...p,\n        checked: !p.checked\n      } : p));\n    } // changes the active/\"clicked on\" element to body when enter is pressed\n\n\n    if (field === 'Enter') {\n      document.activeElement.blur();\n    } // deletes line if backspace is pressed while line is empty\n\n\n    if (field === 'Backspace') {\n      if (newValue === \"\" && itemID !== list[list.length - 1].key) {\n        handleItemDeleted(itemID);\n\n        if (selected.includes(itemID)) {\n          handleToggleSelectedLines(itemID);\n        }\n      }\n    }\n  } // controls whether the hide button should be showing\n\n\n  function handleHideToggle() {\n    setHidden(!hidden);\n  } // deletes data from the list by filtering out selected keys\n\n\n  function handleDelete() {\n    setList(list.filter(p => !selected.includes(p.key)));\n    setSelected([]); // no selected items remain, so update that\n\n    setWarning(false);\n  }\n\n  function handleWarning() {\n    setWarning(true);\n  } // changes display of selected lines by filtering selected lines\n\n\n  function handleToggleSelectedLines(lineID) {\n    if (selected.includes(lineID)) {\n      setSelected(selected.filter(p => p !== lineID));\n    } else {\n      setSelected([...selected, lineID]);\n    }\n  } // deletes an item by filtering it out from the data\n\n\n  function handleItemDeleted(itemID) {\n    return setList(list.filter(p => p.key !== itemID));\n  } // adds an item by generating an id and using the passing in text\n\n\n  function handleItemAdded(textValue) {\n    setList([...list, {\n      key: generateUniqueID(),\n      text: textValue,\n      checked: false,\n      check_visible: false,\n      text_visible: true,\n      select_visible: false\n    }]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    onClick: e => {\n      handleLineEdited(-1);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"button-div\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"title\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" My List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"lineList\",\n      children: /*#__PURE__*/_jsxDEV(LineList, {\n        lineList: list,\n        listData: initialData,\n        selectedLines: selected,\n        hideChecks: hidden,\n        showDeleteButton: showDeleteButton,\n        showHideButton: showHideButton,\n        disableChecks: disableChecks,\n        onHideToggle: handleHideToggle,\n        onToggleSelected: handleToggleSelectedLines,\n        onItemChanged: handleItemChanged,\n        onItemDeleted: handleItemDeleted,\n        onTrash: handleWarning,\n        onItemAdded: handleItemAdded,\n        onEdited: handleLineEdited\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), showWarning && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"back\",\n          onClick: () => setWarning(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"warning\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"The selected items will be \", /*#__PURE__*/_jsxDEV(\"span\", {\n              id: \"deleteText\",\n              children: \"permanently deleted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 56\n            }, this), \". Are you sure you want to delete these items?\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"warningButtons\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"no\",\n              onClick: () => setWarning(false),\n              children: \"No, Go Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"yes\",\n              onClick: handleDelete,\n              children: \"Yes, Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"gckGj8XnUlDzTwSoBcSSdGH90FM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/cgcouto/cs124/lab2/listapp-react/src/App.js"],"names":["LineList","useState","generateUniqueID","App","initialData","key","text","checked","check_visible","text_visible","select_visible","list","setList","selected","setSelected","edited","setEdited","hidden","setHidden","showWarning","setWarning","showHideButton","filter","item","length","showDeleteButton","disableChecks","handleLineEdited","lineID","handleItemChanged","handleItemAdded","itemID","field","newValue","map","p","document","activeElement","blur","handleItemDeleted","includes","handleToggleSelectedLines","handleHideToggle","handleDelete","handleWarning","textValue","e"],"mappings":"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","sourcesContent":["import './App.css';\nimport LineList from './LineList.js';\nimport {useState} from 'react';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nfunction App() {\n\n    // Each list item is initialized with the fields shown below\n    const initialData = [\n        {\n            key: 0,\n            text: \"Tap to Add Note\",\n            checked: false,\n            check_visible: false,\n            text_visible: true,\n            select_visible: false\n        }\n    ]\n\n    // state data to be used later\n    const [list, setList] = useState(initialData);\n    const [selected, setSelected] = useState([]);\n    const [edited, setEdited] = useState(-1);\n    const [hidden, setHidden] = useState(false);\n    const [showWarning, setWarning] = useState(false);\n\n    // stores data on what to display\n    let showHideButton = (list.filter((item) => item.checked === true)).length > 0;\n    let showDeleteButton = selected.length > 0;\n    let disableChecks = (edited !== -1);\n\n    // update the edited state with the line key if we've currently clicked onto a line, -1 otherwise\n    function handleLineEdited(lineID) {\n\n        // if we're editing the bottommost 'Tap to Add Note' line and the text has changed, update our data/state\n        if (edited === list[list.length-1].key && list[list.length-1].text !== \"Tap to Add Note\") {\n            if (list[list.length-1].text === \"\") {\n                handleItemChanged(list[list.length-1].key, \"text\", \"Tap to Add Note\");\n\n            } else {\n                // display check and select box for added note, create tap line\n                list[list.length-1].check_visible = true;\n                list[list.length-1].select_visible = true;\n                handleItemAdded(\"Tap to Add Note\");\n\n            }\n        }\n        if (lineID === list[list.length-1].key && edited !== lineID) {\n            handleItemChanged(lineID, \"text\", \"\")\n        }\n\n        setEdited(lineID) // update edited line state\n    }\n\n    // changes line data for textboxes, checkboxes, or special key presses\n    function handleItemChanged(itemID, field, newValue) {\n\n        if (field === \"text\") {\n            return (\n                setList(list.map(\n                    p => p.key === itemID ? {...p, [field]:newValue} : p))\n            );\n        }\n        if (field === \"checkbox\") {\n            setList(list.map(\n                p => p.key === itemID ? {...p, checked:(!p.checked)} : p))\n        }\n\n        // changes the active/\"clicked on\" element to body when enter is pressed\n        if (field === 'Enter') {\n            document.activeElement.blur();\n        }\n\n        // deletes line if backspace is pressed while line is empty\n        if (field === 'Backspace') {\n            if (newValue === \"\" && itemID !== list[list.length-1].key) {\n                handleItemDeleted(itemID);\n                if (selected.includes(itemID)) {\n                    handleToggleSelectedLines(itemID);\n                }\n            }\n        }}\n\n    // controls whether the hide button should be showing\n    function handleHideToggle() {\n        setHidden(!hidden);\n    }\n\n    // deletes data from the list by filtering out selected keys\n    function handleDelete() {\n        setList(list.filter((p) => !selected.includes(p.key)));\n        setSelected([]); // no selected items remain, so update that\n        setWarning(false);\n    }\n\n\n    function handleWarning() {\n        setWarning(true);\n    }\n\n    // changes display of selected lines by filtering selected lines\n    function handleToggleSelectedLines(lineID) {\n        if (selected.includes(lineID)) {\n            setSelected(selected.filter((p) => p !== lineID))\n        } else {\n            setSelected([...selected, lineID])\n        }\n    }\n\n    // deletes an item by filtering it out from the data\n    function handleItemDeleted(itemID) {\n        return(setList(list.filter((p) => p.key !== itemID)));\n    }\n\n    // adds an item by generating an id and using the passing in text\n    function handleItemAdded(textValue) {\n        setList([...list,\n            {\n                key: generateUniqueID(),\n                text: textValue,\n                checked: false,\n                check_visible: false,\n                text_visible: true,\n                select_visible: false\n            }]);\n    }\n\n    return(\n        <div id=\"container\" onClick= {(e) => {handleLineEdited(-1)}}>\n            <div id=\"button-div\">\n                <button className=\"back-button\">&larr;</button>\n            </div>\n            <div id=\"title\"><h2> My List</h2></div>\n            <div id={\"lineList\"}>\n                <LineList lineList={list}\n                          listData={initialData}\n                          selectedLines={selected}\n                          hideChecks={hidden}\n                          showDeleteButton={showDeleteButton}\n                          showHideButton={showHideButton}\n                          disableChecks={disableChecks}\n                          onHideToggle={handleHideToggle}\n                          onToggleSelected={handleToggleSelectedLines}\n                          onItemChanged={handleItemChanged}\n                          onItemDeleted={handleItemDeleted}\n                          onTrash={handleWarning}\n                          onItemAdded={handleItemAdded}\n                          onEdited={handleLineEdited}\n                          />\n            </div>\n            {showWarning && <div>\n                <div>\n                    <div id={\"back\"} onClick={() => setWarning(false)}/>\n                    <div id={\"warning\"} >\n                        <div>\n                            The selected items will be <span id={\"deleteText\"}>permanently deleted</span>.\n                            Are you sure you want to delete these items?\n                        </div>\n                        <div id={\"warningButtons\"}>\n\n\n                            <div id={\"no\"} onClick={() => setWarning(false)}>No, Go Back</div>\n                            <div id={\"yes\"} onClick={handleDelete}>Yes, Delete</div>\n\n                        </div>\n\n                    </div>\n                </div>\n            </div>}\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}